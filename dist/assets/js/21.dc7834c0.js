(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{163:function(a,t,s){"use strict";s.r(t);var n={props:["slot-key"],mounted:function(){this.$nextTick(function(){this.$vuepress.$emit("AsyncMarkdownContentMounted",this.slotKey)})}},e=s(4),r=Object(e.a)(n,function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.slotKey}},[s("p",[a._v("create an array of shuffle values, using a version of "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Fisher-Yates_shuffle",target:"_blank",rel:"noopener noreferrer"}},[a._v("Fisher-Yates shuffle"),s("OutboundLink")],1),a._v(".")]),a._v(" "),s("p",[a._v("_.shuffle base on the method below.")]),a._v(" "),s("p",[a._v("use the Object.values(obj)")]),a._v(" "),s("p",[a._v("在对非数组的对象类型，使用差不多是 Object.values()的方式，将其转成数组。然后打乱")]),a._v(" "),s("p",[s("strong",[a._v("_.shuffle('aaabc') -> ['b', 'c', 'a', 'a', 'a']")])]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token comment"}},[a._v("/**\n * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @param {number} [size=array.length] The size of `array`.\n * @returns {Array} Returns `array`.\n */")]),a._v("\n"),s("span",{attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),s("span",{attrs:{class:"token function"}},[a._v("shuffleSelf")]),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),a._v("array"),s("span",{attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" size"),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{attrs:{class:"token keyword"}},[a._v("var")]),a._v(" index "),s("span",{attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{attrs:{class:"token operator"}},[a._v("-")]),s("span",{attrs:{class:"token number"}},[a._v("1")]),s("span",{attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    length "),s("span",{attrs:{class:"token operator"}},[a._v("=")]),a._v(" array"),s("span",{attrs:{class:"token punctuation"}},[a._v(".")]),a._v("length"),s("span",{attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    lastIndex "),s("span",{attrs:{class:"token operator"}},[a._v("=")]),a._v(" length "),s("span",{attrs:{class:"token operator"}},[a._v("-")]),a._v(" "),s("span",{attrs:{class:"token number"}},[a._v("1")]),a._v("\n\n  size "),s("span",{attrs:{class:"token operator"}},[a._v("=")]),a._v(" size "),s("span",{attrs:{class:"token operator"}},[a._v("===")]),a._v(" undefined "),s("span",{attrs:{class:"token operator"}},[a._v("?")]),a._v(" length "),s("span",{attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" size\n  "),s("span",{attrs:{class:"token keyword"}},[a._v("while")]),a._v(" "),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{attrs:{class:"token operator"}},[a._v("++")]),a._v("index "),s("span",{attrs:{class:"token operator"}},[a._v("<")]),a._v(" size"),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{attrs:{class:"token keyword"}},[a._v("var")]),a._v(" rand "),s("span",{attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{attrs:{class:"token function"}},[a._v("baseRandom")]),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),a._v("index"),s("span",{attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" lastIndex"),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n      value "),s("span",{attrs:{class:"token operator"}},[a._v("=")]),a._v(" array"),s("span",{attrs:{class:"token punctuation"}},[a._v("[")]),a._v("rand"),s("span",{attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\n    array"),s("span",{attrs:{class:"token punctuation"}},[a._v("[")]),a._v("rand"),s("span",{attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{attrs:{class:"token operator"}},[a._v("=")]),a._v(" array"),s("span",{attrs:{class:"token punctuation"}},[a._v("[")]),a._v("index"),s("span",{attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n    array"),s("span",{attrs:{class:"token punctuation"}},[a._v("[")]),a._v("index"),s("span",{attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{attrs:{class:"token operator"}},[a._v("=")]),a._v(" value\n  "),s("span",{attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n  array"),s("span",{attrs:{class:"token punctuation"}},[a._v(".")]),a._v("length "),s("span",{attrs:{class:"token operator"}},[a._v("=")]),a._v(" size\n  "),s("span",{attrs:{class:"token keyword"}},[a._v("return")]),a._v(" array\n"),s("span",{attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("simple implemention. in "),s("code",[a._v("while")]),a._v(" loop, change "),s("code",[a._v("rand")]),a._v(" depends on "),s("code",[a._v("index")]),a._v(" and function "),s("code",[a._v("baseRandom")]),a._v(".\n简单的实现，在 while 循环中，依赖 baseRandom 方法和 index 的改变，得到随机的 rand。")]),a._v(" "),s("p",[a._v("then swap the value of index "),s("code",[a._v("index")]),a._v(" and "),s("code",[a._v("rand")]),a._v(" in array.\n然后交换数组中索引为 index 和 rand 对应的值。")]),a._v(" "),s("p",[a._v("Base on this, return an array of size length depends on the parameter "),s("code",[a._v("size")]),a._v(" passed in.\n在此之上，根据传入的参数 size，返回一个 size 长度的数组")])])},[],!1,null,null,null);r.options.__file="Shuffle in Lodash.md";t.default=r.exports}}]);