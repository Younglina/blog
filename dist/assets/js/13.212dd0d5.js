(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{173:function(t,a,s){"use strict";s.r(a);var n={props:["slot-key"],mounted:function(){this.$nextTick(function(){this.$vuepress.$emit("AsyncMarkdownContentMounted",this.slotKey)})}},r=s(4),e=Object(r.a)(n,function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.slotKey}},[s("h1",{attrs:{id:"lodash-中一些常用方法的介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lodash-中一些常用方法的介绍","aria-hidden":"true"}},[t._v("#")]),t._v(" lodash 中一些常用方法的介绍.")]),t._v(" "),s("h2",{attrs:{id:"参数多个传入变成数组传入-call-comma-apply-array-的形式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参数多个传入变成数组传入-call-comma-apply-array-的形式","aria-hidden":"true"}},[t._v("#")]),t._v(" 参数多个传入变成数组传入(call-comma -> apply-array)的形式.")]),t._v(" "),s("blockquote",[s("p",[t._v("doSomthing(a,b,c) -> doSomeThing(a, [b,c])")])]),t._v(" "),s("p",[t._v("用过 call 或者 apply,一定知道除了改变上下文,更重要的是 apply 是接收数组的参数,而 call 接收的是一个个参数.忘了用属于怎么讲了.")]),t._v(" "),s("p",[t._v("lodash 中通过设计了 baseRest 的这个方法,做了这种转化,里面使用了 start 还有 transform 之类的,不用管这些,其实最终还是实现我们上面说的功能.")]),t._v(" "),s("p",[t._v("eg.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token template-string"}},[s("span",{attrs:{class:"token string"}},[t._v("`_.pull方法实际上是baseRest(_.pullAll)`")])]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("overRest")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("func"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" transform"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{attrs:{class:"token comment"}},[t._v("// 如果start没有定义,则从function.length - 1,即参数的个数减1.")]),t._v("\n  "),s("span",{attrs:{class:"token comment"}},[t._v("// 定义start就是定义一个分割点.func(caller )")]),t._v("\n  start "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("nativeMax")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start "),s("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" undefined "),s("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" func"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" start"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" args "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" arguments"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      index "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      length "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("nativeMax")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" start"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      array "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("Array")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("length"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token comment"}},[t._v("// 比如func是支持3个参数.但是实际调用的时候传了100个的话.")]),t._v("\n    "),s("span",{attrs:{class:"token comment"}},[t._v("// 最后参数都看成是一个数组.")]),t._v("\n    "),s("span",{attrs:{class:"token comment"}},[t._v("// func (a,b,c),然后overRest(func)(1,2,3,4,5,6,7)")]),t._v("\n    "),s("span",{attrs:{class:"token comment"}},[t._v("// => 相当于是func.apply(this,[1,2, [3,4,5,6,7]])")]),t._v("\n    "),s("span",{attrs:{class:"token comment"}},[t._v("// overRest就是做了这么一个功能.")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token operator"}},[t._v("++")]),t._v("index "),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" length"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      array"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" args"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("start "),s("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" index"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    index "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" otherArgs "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("Array")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start "),s("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token operator"}},[t._v("++")]),t._v("index "),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" start"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      otherArgs"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" args"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    otherArgs"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("start"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("transform")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("apply")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("func"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("this")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" otherArgs"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("baseRest 中使用 setToString 方法,将 baseRest 的 toString 赋值为了 baseRest 方法参数中的 func 的 toString 的值\n这也是符合实际需求的转换,毕竟 baseRest 后的函数是依赖于原函数 func 的变种")])]),t._v(" "),s("p",[t._v("eg. _pull.toString() 其实就是 pullAll 的方法定义,因为 var pull = baseRest(pullAll)")]),t._v(" "),s("h2",{attrs:{id:"一些-array-methods-的简单实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一些-array-methods-的简单实现","aria-hidden":"true"}},[t._v("#")]),t._v(" 一些 Array methods 的简单实现.")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("_.head === _.first, 获取数组的第一个元素. 做一些简单的判断.然后获取 array[0].")])]),t._v(" "),s("li",[s("p",[t._v("_.fromPairs 将数组转化成键值对,相当于 Object.entries 的逆向过程.")]),t._v(" "),s("p",[t._v("[['a', '1'], ['b', 2]] -> {'a': '1', 'b': 2},具体实现是遍历 array,返回一个{ array[index][0] : array[index][1] }的对象")])]),t._v(" "),s("li",[s("p",[t._v("_.initial, 获取原数组中除掉最后一个元素的数组. 内部使用 baseSlice. 既然是使用 slice,则不会影响到原数组.当然这些都是浅拷贝")]),t._v(" "),s("p",[t._v("baseSlice(array, 0, length - 1)")])]),t._v(" "),s("li",[s("p",[t._v("_.tail, 获取原数组除去第一个元素的数组.内部使用 baseSlice, baseSlise(array, 1, length)")])]),t._v(" "),s("li",[s("p",[t._v("_.last 获取最后一个元素, 同_head 和 first.")])]),t._v(" "),s("li",[s("p",[t._v("_.nth 获取第几个元素,如果是负值,从末位开始.")])]),t._v(" "),s("li",[s("p",[t._v("_.reverse 基于原生的 reverse 实现.")])]),t._v(" "),s("li",[s("p",[t._v("_.slice 基于 baseSlice,参数什么的都会经过 无符号右移操作 >>> 处理成数值类型.在内部实现中有这样的代码.")])])])])},[],!1,null,null,null);e.options.__file="Array in Lodash.md";a.default=e.exports}}]);