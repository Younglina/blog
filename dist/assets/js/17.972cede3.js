(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{164:function(t,a,s){"use strict";s.r(a);var n={props:["slot-key"],mounted:function(){this.$nextTick(function(){this.$vuepress.$emit("AsyncMarkdownContentMounted",this.slotKey)})}},e=s(4),o=Object(e.a)(n,function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.slotKey}},[s("h1",{attrs:{id:"when-you-need-take-subset-of-an-array-from-left-or-right-and-in-special-situation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#when-you-need-take-subset-of-an-array-from-left-or-right-and-in-special-situation","aria-hidden":"true"}},[t._v("#")]),t._v(" When you need take subset of an array from left or right and in special situation!")]),t._v(" "),s("blockquote",[s("p",[t._v("当你需要一个数组切片,从左开始或者从右开始,并且可以使用一个特定的判断函数.")])]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#when-you-need-take-subset-of-an-array-from-left-or-right-and-in-special-situation"}},[t._v("When you need take subset of an array from left or right and in special situation!")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#_take--_takewhile--_takeright--_takerightwhile%E7%9A%84%E5%AE%9E%E7%8E%B0"}},[t._v("_.take & _.takeWhile & _.takeRight & _.takeRightWhile 的实现")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#_intersection--_intersectionby--_intersectionwith"}},[t._v("_.interSection & _.interSectionBy & _.interSectionWith")])])])])]),t._v(" "),s("h2",{attrs:{id:"take-takewhile-takeright-takerightwhile-的实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#take-takewhile-takeright-takerightwhile-的实现","aria-hidden":"true"}},[t._v("#")]),t._v(" _.take & _.takeWhile & _.takeRight & _.takeRightWhile 的实现")]),t._v(" "),s("blockquote",[s("p",[t._v("创建数组切片,从 Array 数组(right:的最后一个元素)开始提取 n 个元素.")])]),t._v(" "),s("blockquote",[s("p",[t._v("创建数组切片,从 Array 数组(right:的最后一个元素)开始提取元素,直到 predicate 返回假值.")])]),t._v(" "),s("p",[t._v("take 和 takeRight 的方法都是基于 baseSlice 实现的,这很容易想到.")]),t._v(" "),s("p",[t._v("takeWhile 和 takeRightWhile 是基于 baseWhile 实现的.看下 baseWhile 的具体定义.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v("/**\n * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\n * without support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to query.\n * @param {Function} predicate The function invoked per iteration.\n * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Array} Returns the slice of `array`.\n */")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("baseWhile")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" predicate"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" isDrop"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fromRight"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" length "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" array"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    index "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" fromRight "),s("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" length "),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n  "),s("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fromRight "),s("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" index"),s("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("++")]),t._v("index "),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" length"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n    "),s("span",{attrs:{class:"token function"}},[t._v("predicate")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" array"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" isDrop\n    "),s("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("baseSlice")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fromRight "),s("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" index"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fromRight "),s("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" index "),s("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" length"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("baseSlice")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fromRight "),s("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" index "),s("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fromRight "),s("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" length "),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" index"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("code",[t._v("baseWhile")]),t._v(" function has four params, the explain for params is above.")]),t._v(" "),s("blockquote",[s("p",[t._v("good use! see below")])]),t._v(" "),s("p",[t._v("use a "),s("code",[t._v("while")]),t._v(" statement to acheive a cleaner effect.")]),t._v(" "),s("ul",[s("li",[t._v("the initial values and changes of "),s("code",[t._v("index")]),t._v(" variable depends on the "),s("code",[t._v("fromRight")]),t._v(" parameter")]),t._v(" "),s("li",[t._v("until predicate function (iteratee function) returns "),s("code",[t._v("false")])])]),t._v(" "),s("p",[s("strong",[t._v("attention")]),t._v(" drop 和 takeRight，dopRight 和 take 的内部实现完全一样，只是表示的语义不同.")]),t._v(" "),s("h2",{attrs:{id:"intersection-intersectionby-intersectionwith"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#intersection-intersectionby-intersectionwith","aria-hidden":"true"}},[t._v("#")]),t._v(" _.interSection & _.interSectionBy & _.interSectionWith")]),t._v(" "),s("blockquote",[s("p",[t._v("create an array of unique values that are included in given arrays using "),s("code",[t._v("sameValueZero")])])]),t._v(" "),s("blockquote",[s("p",[t._v("创建一个唯一值的数组，使用 sameValueZero 的方式进行判断，返回值的顺序和引用由第一个数组决定。")])]),t._v(" "),s("p",[t._v("the defination of methods above is base on funtion "),s("code",[t._v("baseIntersection")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v("/**\n * The base implementation of methods like `_.intersection`, without support\n * for iteratee shorthands, that accepts an array of arrays to inspect.\n *\n * @private\n * @param {Array} arrays The arrays to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of shared values.\n */")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("baseIntersection")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrays"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" iteratee"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" comparator"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" includes "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" comparator "),s("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" arrayIncludesWith "),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" arrayIncludes"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    length "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" arrays"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    othLength "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" arrays"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    othIndex "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" othLength"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    caches "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("Array")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("othLength"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    maxLength "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("Infinity")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    result "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n  "),s("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("othIndex"),s("span",{attrs:{class:"token operator"}},[t._v("--")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" array "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" arrays"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("othIndex"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("othIndex "),s("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" iteratee"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      array "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("arrayMap")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("baseUnary")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iteratee"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    maxLength "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("nativeMin")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" maxLength"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    caches"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("othIndex"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("\n      "),s("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("comparator "),s("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iteratee "),s("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("length "),s("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("120")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" array"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("120")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("SetCache")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("othIndex "),s("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" array"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" undefined\n  "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  array "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" arrays"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n  "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" index "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    seen "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" caches"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n  outer"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token operator"}},[t._v("++")]),t._v("index "),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" length "),s("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" result"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" maxLength"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token comment"}},[t._v("// 对arrays[0]进行遍历,array是一个二维数组[[1,2,3],[2,3],[3,4]]")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" value "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" array"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      computed "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" iteratee "),s("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("iteratee")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" value\n\n    value "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" comparator "),s("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" value "),s("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" value "),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),s("span",{attrs:{class:"token comment"}},[t._v("// 根据数组的长度是否大于120,决定是否使用缓存")]),t._v("\n    "),s("span",{attrs:{class:"token comment"}},[t._v("// 如果最终存放的数组result中没有当前值,就进入内层循环")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),s("span",{attrs:{class:"token operator"}},[t._v("!")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("seen\n        "),s("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("cacheHas")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("seen"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" computed"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("includes")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" computed"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" comparator"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      othIndex "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" othLength\n      "),s("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("othIndex"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{attrs:{class:"token comment"}},[t._v("// 这里也需要做判断,判断是否需要使用缓存")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" cache "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" caches"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("othIndex"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n          "),s("span",{attrs:{class:"token operator"}},[t._v("!")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cache\n            "),s("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("cacheHas")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cache"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" computed"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("includes")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrays"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("othIndex"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" computed"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" comparator"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),s("span",{attrs:{class:"token comment"}},[t._v("// 如果同级的别的数组中没有该元素,就跳出循环重新来过.")]),t._v("\n          "),s("span",{attrs:{class:"token comment"}},[t._v("// index++")]),t._v("\n          "),s("span",{attrs:{class:"token keyword"}},[t._v("continue")]),t._v(" outer\n        "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),s("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("seen"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        seen"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("push")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("computed"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),s("span",{attrs:{class:"token comment"}},[t._v("// 如果每个数组中都有该值,就往result中push")]),t._v("\n      result"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("push")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[s("code",[t._v("By")]),t._v(" makes use of the parameter "),s("code",[t._v("iteratee")]),t._v(".")])]),t._v(" "),s("p",[s("strong",[s("code",[t._v("with")]),t._v(" makes use of the parameter "),s("code",[t._v("comparator")]),t._v(".")])]),t._v(" "),s("p",[t._v("在求数组的交集的时候,是将整个输入参数传递做处理的.和"),s("code",[t._v("_.union")]),t._v("有区别.")])])},[],!1,null,null,null);o.options.__file="Intersection in Lodash.md";a.default=o.exports}}]);